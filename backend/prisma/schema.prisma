generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  ngoId     Int
  ngo       Ngo      @relation(fields: [ngoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Ngo

model Ngo {
  id                          Int      @id @map("_id")
  name                        String
  description                 String
  is_formalized               Boolean
  start_year                  Int?
  contact_phone               String?
  instagram_link              String?
  x_link                      String?
  facebook_link               String?
  pix_qr_code_link            String?
  site                        String?
  gallery_images_url          String[] 
  skills                      Json
  causes                      Json    
  sustainable_development_goals Json  
  files                       OngFile[]
  actionFiles                 ActionFile[]
  users                       User[]
  actions                     Action[]
  ngoGrafic                   NgoGraphic?  
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @default(now())

  @@map("ngos") 
}

model OngFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  aws_name String  // nome pra deletar na aws
  name      String
  category  String   // Nota fiscal, relatório, other, image, video
  aws_url   String
  ngoId     Int      // ID da ONG associada
  mime_type String   // Tipo MIME do arquivo
  size      Int      // Tamanho do arquivo em bytes
  ngo       Ngo      @relation(fields: [ngoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("ngo_files") // Nome da coleção no MongoDB
  @@index([ngoId, category])
}

model NgoGraphic {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ngoId         Int      @unique
  ngo           Ngo      @relation(fields: [ngoId], references: [id])
  totalExpenses Float    
  expensesByCategory Json @default("[]") // Gastos por categoria (ex: { "Esportes": 1000, "Alimentação": 500 })
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@map("ngo_graphics") 
}

// Action

model Action {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          String
  ngoId         Int      // ID da ONG associada
  spent         Float
  goal          Float
  colected      Float
  aws_url   String    // foto da ong
  files         ActionFile[]
  expenses      ActionExpensesGrafic[]
  ngo           Ngo      @relation(fields: [ngoId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@map("actions") 
  @@index([ngoId])
}

model ActionFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  aws_name String  // nome pra deletar na aws
  name      String
  category  String   // Nota fiscal, relatório, other, image, video
  aws_url   String
  mime_type String   // Tipo MIME do arquivo
  size      Int      // Tamanho do arquivo em bytes
  actionId  String   @db.ObjectId
  ngoId     Int    
  action    Action   @relation(fields: [actionId], references: [id])
  ngo       Ngo      @relation(fields: [ngoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("action_files")
  @@index([actionId, category])
}

model ActionExpensesGrafic {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  categorysExpenses Json     @default("[]")// Gastos por categoria (ex: { "Esportes": 1000, "Alimentação": 500 })    
  actionId          String   @db.ObjectId
  ngoId             Int
  action            Action   @relation(fields: [actionId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("action_expenses") 
  @@index([actionId])
}

model Log {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ngoId     Int
  userId      String   @db.ObjectId
  userName String 
  action      String // A ação realizada (ex: "CREATE", "UPDATE", "DELETE").
  model       String // O modelo que foi alterado (ex: "User", "Ngo", "Action").
  modelId     String   @db.ObjectId
  changes     Json
  description String
  timestamp   DateTime @default(now())

  @@map("logs") // Nome da coleção no MongoDB
  @@index([model, modelId, timestamp])
}