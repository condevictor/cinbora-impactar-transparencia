generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Ngo {
  id                          Int      @id @map("_id")
  name                        String
  description                 String?
  is_formalized               Boolean
  start_year                  Int?
  contact_phone               String?
  instagram_link              String?
  x_link                      String?
  facebook_link               String?
  pix_qr_code_link            String?
  site                        String?
  gallery_images_url          String[] 
  skills                      Json[]
  causes                      Json[]    
  sustainable_development_goals Json[]  
  files                       File[] 
  users                       User[]
  actions                     Action[]
  ngoGrafic                   NgoGraphic?  
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("ngos") 
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  ngoId     Int
  ngo       Ngo      @relation(fields: [ngoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  aws_url   String
  ngoId     Int      // ID da ONG associada
  type      String   // Tipo MIME do arquivo (ex: 'application/pdf')
  size      Int      // Tamanho do arquivo em bytes
  ngo       Ngo      @relation(fields: [ngoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("files") // Nome da coleção no MongoDB
}

model Action {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          String
  ngoId         Int      // ID da ONG associada
  current_value Float
  goal          Float
  expenses      ExpenseGrafic[]
  ngo           Ngo      @relation(fields: [ngoId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@map("actions") 
}

model ExpenseGrafic {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  category      String   // Categoria do gasto (ex: Esportes, Alimentação)
  amount        Float    
  actionId      String   @db.ObjectId
  action        Action   @relation(fields: [actionId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("expenses") 
}

model NgoGraphic {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ngoId         Int      @unique
  ngo           Ngo      @relation(fields: [ngoId], references: [id])
  totalExpenses Float    
  expensesByCategory Json // Gastos por categoria (ex: { "Esportes": 1000, "Alimentação": 500 })
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("ngo_graphics") 
}
